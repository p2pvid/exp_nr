{"version":3,"file":"codec.js","sourceRoot":"","sources":["../src/codec.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { Buffer } from \"buffer\"\nimport varint from \"varint\"\nimport * as convert from \"./convert\"\nimport { Protocol, protocols } from \"./protocols\"\n\n// string -> [[str name, str addr]... ]\nexport function stringToStringTuples(str: string): string[][] {\n  const tuples = []\n  const parts = str.split(\"/\").slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === \"\") {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError(\"invalid address: \" + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join(\"/\")),\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\nexport function stringTuplesToString(tuples: string[][]): string {\n  const parts: string[] = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n  })\n\n  return cleanPath(parts.join(\"/\"))\n}\n\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\nexport function stringTuplesToTuples(tuples: string[][]): any[][] {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\nexport function tuplesToStringTuples(tuples: any[][]): any[][] {\n  return tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer ]... ] -> Buffer\nexport function tuplesToBuffer(tuples: any[][]): Buffer {\n  return fromBuffer(\n    Buffer.concat(\n      tuples.map((tup) => {\n        const proto = protoFromTuple(tup)\n        let buf = Buffer.from(varint.encode(proto.code))\n\n        if (tup.length > 1) {\n          buf = Buffer.concat([buf, tup[1]]) // add address buffer\n        }\n\n        return buf\n      })\n    )\n  )\n}\n\nexport function sizeForAddr(p: Protocol, addr: number[] | Buffer): number {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n// Buffer -> [[int code, Buffer ]... ]\nexport function bufferToTuples(buf: Buffer): (number | Buffer)[][] {\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += size + n\n\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError(\"Invalid address buffer: \" + buf.toString(\"hex\"))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Buffer -> String\nexport function bufferToString(buf: Buffer): string {\n  const a = bufferToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Buffer\nexport function stringToBuffer(str: string): Buffer {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBuffer(b)\n}\n\n// String -> Buffer\nexport function fromString(str: string): Buffer {\n  return stringToBuffer(str)\n}\n\n// Buffer -> Buffer\nexport function fromBuffer(buf: Buffer): Buffer {\n  const err = validateBuffer(buf)\n  if (err) throw err\n  return Buffer.from(buf) // copy\n}\n\nfunction validateBuffer(buf: Buffer): any {\n  try {\n    bufferToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\nexport function isValidBuffer(buf: Buffer): boolean {\n  return validateBuffer(buf) === undefined\n}\n\nexport function cleanPath(str: string): string {\n  return (\n    \"/\" +\n    str\n      .trim()\n      .split(\"/\")\n      .filter((a) => a)\n      .join(\"/\")\n  )\n}\n\nexport function ParseError(str: string): Error {\n  return new Error(\"Error parsing address: \" + str)\n}\n\nexport function protoFromTuple(tup: any[]): Protocol {\n  const proto = protocols(tup[0])\n  return proto\n}\n"]}