{"version":3,"file":"convert.js","sourceRoot":"","sources":["../src/convert.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA8C;AAC9C,mCAA+B;AAC/B,oDAA2B;AAC3B,2CAAuC;AACvC,8DAA8D;AAC9D,MAAM,OAAO,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAA;AAEhD,SAAS,UAAU,CAAC,GAAW;IAC7B,+BAA+B;IAC/B,MAAM,GAAG,GAAG,qBAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAA;IAC9C,MAAM,IAAI,GAAG,eAAM,CAAC,IAAI,CAAC,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAA;IACnD,OAAO,eAAM,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAA;AACnC,CAAC;AAED,SAAS,UAAU,CAAC,GAAW;IAC7B,MAAM,IAAI,GAAG,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;IAC/B,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,gBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IAEpC,IAAI,GAAG,CAAC,MAAM,KAAK,IAAI,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAA;KACxC;IAED,OAAO,qBAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAA;AAC3C,CAAC;AAED,SAAgB,QAAQ,CAAC,GAAoB,EAAE,GAAW;IACxD,MAAM,KAAK,GAAG,qBAAS,CAAC,GAAG,CAAC,CAAA;IAC5B,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,GAAG;YACN,OAAO,UAAU,CAAC,GAAG,CAAC,CAAA;QACxB;YACE,OAAO,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;KACpC;AACH,CAAC;AARD,4BAQC;AAED,SAAgB,QAAQ,CAAC,GAAoB,EAAE,GAAW;IACxD,MAAM,KAAK,GAAG,qBAAS,CAAC,GAAG,CAAC,CAAA;IAC5B,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,GAAG;YACN,OAAO,UAAU,CAAC,GAAG,CAAC,CAAA;QACxB;YACE,OAAO,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;KACpC;AACH,CAAC;AARD,4BAQC","sourcesContent":["import { ThreadID } from \"@textile/threads-id\"\nimport { Buffer } from \"buffer\"\nimport varint from \"varint\"\nimport { protocols } from \"./protocols\"\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Convert = require(\"multiaddr/src/convert\")\n\nfunction thread2buf(str: string) {\n  // const buf = Buffer.from(str)\n  const buf = ThreadID.fromString(str).toBytes()\n  const size = Buffer.from(varint.encode(buf.length))\n  return Buffer.concat([size, buf])\n}\n\nfunction buf2thread(buf: Buffer) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error(\"inconsistent lengths\")\n  }\n\n  return ThreadID.fromBytes(buf).toString()\n}\n\nexport function toString(prt: string | number, buf: Buffer): string {\n  const proto = protocols(prt)\n  switch (proto.code) {\n    case 406:\n      return buf2thread(buf)\n    default:\n      return Convert.toString(prt, buf)\n  }\n}\n\nexport function toBuffer(prt: string | number, str: string): Buffer {\n  const proto = protocols(prt)\n  switch (proto.code) {\n    case 406:\n      return thread2buf(str)\n    default:\n      return Convert.toBuffer(prt, str)\n  }\n}\n"]}