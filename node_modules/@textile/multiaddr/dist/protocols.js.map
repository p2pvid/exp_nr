{"version":3,"file":"protocols.js","sourceRoot":"","sources":["../src/protocols.ts"],"names":[],"mappings":"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","sourcesContent":["const V = -1\n\nexport type TableRow = [number, number, string, boolean?, (boolean | string)?]\n\nconst _table: TableRow[] = [\n  [4, 32, \"ip4\"],\n  [6, 16, \"tcp\"],\n  [33, 16, \"dccp\"],\n  [41, 128, \"ip6\"],\n  [42, V, \"ip6zone\"],\n  [53, V, \"dns\", true],\n  [54, V, \"dns4\", true],\n  [55, V, \"dns6\", true],\n  [56, V, \"dnsaddr\", true],\n  [132, 16, \"sctp\"],\n  [273, 16, \"udp\"],\n  [275, 0, \"p2p-webrtc-star\"],\n  [276, 0, \"p2p-webrtc-direct\"],\n  [277, 0, \"p2p-stardust\"],\n  [290, 0, \"p2p-circuit\"],\n  [301, 0, \"udt\"],\n  [302, 0, \"utp\"],\n  [400, V, \"unix\", false, \"path\"],\n  [406, V, \"thread\"],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, \"ipfs\"],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, \"p2p\"],\n  [443, 0, \"https\"],\n  [444, 96, \"onion\"],\n  [445, 296, \"onion3\"],\n  [446, V, \"garlic64\"],\n  [460, 0, \"quic\"],\n  [477, 0, \"ws\"],\n  [478, 0, \"wss\"],\n  [479, 0, \"p2p-websocket-star\"],\n  [480, 0, \"http\"],\n]\n\nexport interface Protocol {\n  code: number\n  size: number\n  name: string\n  resolvable: boolean\n  path: boolean\n}\n\nfunction p([code, size, name, resolvable, path]: TableRow): Protocol {\n  return {\n    code: code,\n    size: size,\n    name: name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path),\n  }\n}\n\nconst _names: Record<string, Protocol> = {}\nconst _codes: Record<number, Protocol> = {}\n\n// populate tables\n_table.forEach((row) => {\n  const proto = p(row)\n  _codes[proto.code] = proto\n  _names[proto.name] = proto\n})\n\nfunction Protocols(proto: number | string): Protocol {\n  if (typeof proto === \"number\") {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto]\n    }\n\n    throw new Error(\"no protocol with code: \" + proto)\n  } else if (typeof proto === \"string\" || (proto as any) instanceof String) {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto]\n    }\n\n    throw new Error(\"no protocol with name: \" + proto)\n  }\n\n  throw new Error(\"invalid protocol id type: \" + proto)\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Protocols {\n  export const V = -1\n  export const lengthPrefixedVarSize = V\n  export const table = _table\n  export const codes = _codes\n  export const names = _names\n  export const object = p\n}\n\nexport { Protocols as protocols }\n"]}